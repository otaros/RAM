// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/14/2022 16:55:27"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    TKLLS
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module TKLLS_vlg_sample_tst(
	CLK,
	EN,
	IO,
	Push/Pop,
	Reset,
	sampler_tx
);
input  CLK;
input  EN;
input [7:0] IO;
input  Push/Pop;
input  Reset;
output sampler_tx;

reg sample;
time current_time;
always @(CLK or EN or IO or Push/Pop or Reset)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module TKLLS_vlg_check_tst (
	Empty,
	Full,
	IO,
	sampler_rx
);
input  Empty;
input  Full;
input [7:0] IO;
input sampler_rx;

reg  Empty_expected;
reg  Full_expected;
reg [7:0] IO_expected;

reg  Empty_prev;
reg  Full_prev;
reg [7:0] IO_prev;

reg  Empty_expected_prev;
reg  Full_expected_prev;
reg [7:0] IO_expected_prev;

reg  last_Empty_exp;
reg  last_Full_exp;
reg [7:0] last_IO_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	Empty_prev = Empty;
	Full_prev = Full;
	IO_prev = IO;
end

// update expected /o prevs

always @(trigger)
begin
	Empty_expected_prev = Empty_expected;
	Full_expected_prev = Full_expected;
	IO_expected_prev = IO_expected;
end



// expected Full
initial
begin
	Full_expected = 1'bX;
end 

// expected Empty
initial
begin
	Empty_expected = 1'bX;
end 
// generate trigger
always @(Empty_expected or Empty or Full_expected or Full or IO_expected or IO)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected Empty = %b | expected Full = %b | expected IO = %b | ",Empty_expected_prev,Full_expected_prev,IO_expected_prev);
	$display("| real Empty = %b | real Full = %b | real IO = %b | ",Empty_prev,Full_prev,IO_prev);
`endif
	if (
		( Empty_expected_prev !== 1'bx ) && ( Empty_prev !== Empty_expected_prev )
		&& ((Empty_expected_prev !== last_Empty_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Empty :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Empty_expected_prev);
		$display ("     Real value = %b", Empty_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Empty_exp = Empty_expected_prev;
	end
	if (
		( Full_expected_prev !== 1'bx ) && ( Full_prev !== Full_expected_prev )
		&& ((Full_expected_prev !== last_Full_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Full :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Full_expected_prev);
		$display ("     Real value = %b", Full_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Full_exp = Full_expected_prev;
	end
	if (
		( IO_expected_prev[0] !== 1'bx ) && ( IO_prev[0] !== IO_expected_prev[0] )
		&& ((IO_expected_prev[0] !== last_IO_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IO[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IO_expected_prev);
		$display ("     Real value = %b", IO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_IO_exp[0] = IO_expected_prev[0];
	end
	if (
		( IO_expected_prev[1] !== 1'bx ) && ( IO_prev[1] !== IO_expected_prev[1] )
		&& ((IO_expected_prev[1] !== last_IO_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IO[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IO_expected_prev);
		$display ("     Real value = %b", IO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_IO_exp[1] = IO_expected_prev[1];
	end
	if (
		( IO_expected_prev[2] !== 1'bx ) && ( IO_prev[2] !== IO_expected_prev[2] )
		&& ((IO_expected_prev[2] !== last_IO_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IO[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IO_expected_prev);
		$display ("     Real value = %b", IO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_IO_exp[2] = IO_expected_prev[2];
	end
	if (
		( IO_expected_prev[3] !== 1'bx ) && ( IO_prev[3] !== IO_expected_prev[3] )
		&& ((IO_expected_prev[3] !== last_IO_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IO[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IO_expected_prev);
		$display ("     Real value = %b", IO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_IO_exp[3] = IO_expected_prev[3];
	end
	if (
		( IO_expected_prev[4] !== 1'bx ) && ( IO_prev[4] !== IO_expected_prev[4] )
		&& ((IO_expected_prev[4] !== last_IO_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IO[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IO_expected_prev);
		$display ("     Real value = %b", IO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_IO_exp[4] = IO_expected_prev[4];
	end
	if (
		( IO_expected_prev[5] !== 1'bx ) && ( IO_prev[5] !== IO_expected_prev[5] )
		&& ((IO_expected_prev[5] !== last_IO_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IO[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IO_expected_prev);
		$display ("     Real value = %b", IO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_IO_exp[5] = IO_expected_prev[5];
	end
	if (
		( IO_expected_prev[6] !== 1'bx ) && ( IO_prev[6] !== IO_expected_prev[6] )
		&& ((IO_expected_prev[6] !== last_IO_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IO[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IO_expected_prev);
		$display ("     Real value = %b", IO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_IO_exp[6] = IO_expected_prev[6];
	end
	if (
		( IO_expected_prev[7] !== 1'bx ) && ( IO_prev[7] !== IO_expected_prev[7] )
		&& ((IO_expected_prev[7] !== last_IO_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IO[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IO_expected_prev);
		$display ("     Real value = %b", IO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_IO_exp[7] = IO_expected_prev[7];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module TKLLS_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK;
reg EN;
reg [7:0] treg_IO;
reg Push/Pop;
reg Reset;
// wires                                               
wire Empty;
wire Full;
wire [7:0] IO;

wire sampler;                             

// assign statements (if any)                          
assign IO = treg_IO;
TKLLS i1 (
// port map - connection between master ports and signals/registers   
	.CLK(CLK),
	.Empty(Empty),
	.EN(EN),
	.Full(Full),
	.IO(IO),
	.\Push/Pop (Push/Pop),
	.Reset(Reset)
);

// CLK
always
begin
	CLK = 1'b0;
	CLK = #10000 1'b1;
	#10000;
end 

// EN
initial
begin
	EN = 1'b1;
end 
// IO[ 7 ]
initial
begin
	treg_IO[7] = 1'b0;
end 
// IO[ 6 ]
initial
begin
	treg_IO[6] = 1'b0;
end 
// IO[ 5 ]
initial
begin
	treg_IO[5] = 1'b0;
end 
// IO[ 4 ]
initial
begin
	treg_IO[4] = 1'b0;
end 
// IO[ 3 ]
initial
begin
	treg_IO[3] = 1'b0;
end 
// IO[ 2 ]
initial
begin
	treg_IO[2] = 1'b0;
end 
// IO[ 1 ]
initial
begin
	treg_IO[1] = 1'b0;
end 
// IO[ 0 ]
initial
begin
	treg_IO[0] = 1'b0;
end 

// Push/Pop
initial
begin
	Push/Pop = 1'b0;
end 

// Reset
initial
begin
	Reset = 1'b0;
end 

TKLLS_vlg_sample_tst tb_sample (
	.CLK(CLK),
	.EN(EN),
	.IO(IO),
	.Push/Pop(Push/Pop),
	.Reset(Reset),
	.sampler_tx(sampler)
);

TKLLS_vlg_check_tst tb_out(
	.Empty(Empty),
	.Full(Full),
	.IO(IO),
	.sampler_rx(sampler)
);
endmodule

